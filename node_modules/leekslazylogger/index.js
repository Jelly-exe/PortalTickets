/**
*
* @name leeksLazyLogger
* @author Eartharoid <eartharoid@gmail.com>
* @license GNU-GPLv3
*
*/

const fs = require('fs');
const leeks = require('leeks.js'); // ultra light weight alternative to chalk
const now = new Date();
let date = now.getDate();

function time() {
  const h = now.getHours();
  const m = now.getMinutes();
  const s = now.getSeconds();
  return `${h}:${('0' + m).slice(-2)}:${('0' + s).slice(-2)}`;
}
let d = ('0' + date).slice(-2);

// let path = `./logs/${d}-${time().replace(':', '-').replace(':', '-')}.log`;
let path = `./logs/${d}-${('0' + now.getMonth()).slice(-2)}-${now.getFullYear()}.${time().replace(':', '-').replace(':', '-')}.log`;
// const log = require(path);

function init(x) {
  // console.log(leeks.colours.cyan(`[INFO | ${time()}] Setting up...`));
  console.log(`[INFO | ${time()}] Initialising logger`);
  if (!fs.existsSync('./logs')) {
    fs.mkdirSync(`./logs`);
    console.log(`[INFO | ${time()}] No logs directory found, creating one for you.`);
  }
  const files = fs.readdirSync('./logs/').filter(file => file.endsWith('.log'));

  console.log(`[INFO | ${time()}] Cleaning up...`);
  for (const file of files) {
    // if(!file.startsWith(`${d}-`)) {
    if(parseInt(file.substr(0,2)) < parseInt(d-7) || parseInt(file.substr(0,2)) > parseInt(d)) {
      fs.unlinkSync(`./logs/${file}`)
      console.log(`[INFO | ${time()}] Deleting './logs/${file}'`);
    };
  };
  try {
    if(x){
      fs.appendFileSync(path, `${x} [ using leeksLazyLogger by Eartharoid ] | Log File (${d}/${('0' + now.getMonth()).slice(-2)}/${now.getFullYear()}) -->\n`, function (error) {
        if (error) throw error;
      });
    } else {
      fs.appendFileSync(path, `[ leeksLazyLogger by Eartharoid ] Log File (${d}/${('0' + now.getMonth()).slice(-2)}/${now.getFullYear()}) -->\n`, function (error) {
        if (error) throw error;
      });
    }

    console.log(`[INFO | ${time()}] Creating new log file (${path})`);
  } catch(error) {
    console.error(leeks.colours.red(error));
  }
};


exports.init = (x, o) => {
  global.options = o;

   init(x)

   if(o) {
    var customTypes = global.options.custom;
    global.typesList = "";
    for  (var type in customTypes) {
      global.typesList = global.typesList + type + ', '
      // console.log(customTypes[type])
      // console.log(type)
      // console.log(customTypes[type].title)
      // console.log(customTypes[type].colour)
      exports[type] = (m, c) => {
        fs.appendFileSync(path, `[${customTypes[type].title.toUpperCase()} | ${time()}] ${m}\n`, function (error) {
          if (error) throw error;
        });
        if(!leeks.supportsColour){return console.log(`[${customTypes[type].title.toUpperCase()} | ${time()}] ${m}`)};
        if(c){console.info(leeks.colours[c](`[${customTypes[type].title.toUpperCase()} | ${time()}] ${m}`))} else {console.info(leeks.colours[customTypes[type].colour](`[${customTypes[type].title.toUpperCase()} | ${time()}] ${m}`))};
      };
    }
    if(leeks.supportsColour) {
      console.log(`[INFO | ${time()}] Initialised logger with the following custom types: ` + leeks.colours.green(typesList.substring(0, typesList.length - 2)));
    } else {
      console.log(`[INFO | ${time()}] Initialised logger with the following custom types: ` + typesList.substring(0, typesList.length - 2)); // not the most elegant way but it's what I thought of first
    }

   } else {
	   console.log(`[INFO | ${time()}] Initialised logger with no additional custom types`);
   }
};

exports.basic = (m, c) => {
  fs.appendFileSync(path, `[${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[${time()}] ${m}`)};
  if(c){console.log(leeks.colours[c](`[${time()}] ${m}`))} else {console.log(`[${time()}] ${m}`)};
};

exports.console = (m, c) => {
  fs.appendFileSync(path, `[INFO | ${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[INFO | ${time()}] ${m}`)};
  if(c){console.log(leeks.colours[c](`[${time()}] ${m}`))} else {console.log(`[INFO | ${time()}] ${m}`)};
};

exports.info = (m, c) => {
  fs.appendFileSync(path, `[INFO | ${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[INFO | ${time()}] ${m}`)};
  if(c){console.info(leeks.colours[c](`[INFO | ${time()}] ${m}`))} else {console.info(leeks.colours.cyan(`[INFO | ${time()}] ${m}`))};
};
exports.success = (m, c) => {
  fs.appendFileSync(path, `[INFO | ${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[INFO | ${time()}] ${m}`)};
  if(c){console.info(leeks.colours[c](`[INFO | ${time()}] ${m}`))} else {console.info(leeks.colours.green(`[INFO | ${time()}] ${m}`))};
};
exports.debug = (m, c) => {
  fs.appendFileSync(path, `[DEBUG | ${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[DEBUG | ${time()}] ${m}`)};
  if(c){console.info(leeks.colours[c](`[DEBUG | ${time()}] ${m}`))} else {console.info(leeks.colours.blueBright(`[DEBUG | ${time()}] ${m}`))};
};
exports.warn = (m, c) => {
  fs.appendFileSync(path, `[WARN | ${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[WARN | ${time()}] ${m}`)};
  if(c){console.warn(leeks.colours[c](`[WARN | ${time()}] ${m}`))} else {console.warn(leeks.colours.yellowBright(`[WARN | ${time()}] ${m}`))};
};
exports.error = (m, c) => {
  fs.appendFileSync(path, `[ERROR | ${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[ERROR | ${time()}] ${m}`)};
  if(c){console.error(leeks.colours[c](`[ERROR | ${time()}] ${m}`))} else {console.error(leeks.colours.redBright(`[ERROR | ${time()}] ${m}`))};
};
exports.custom = (t, m, c) => {
  fs.appendFileSync(path, `[${t} | ${time()}] ${m}\n`, function (error) {
    if (error) throw error;
  });
  if(!leeks.supportsColour){return console.log(`[${t.toUpperCase()} | ${time()}] ${m}`)};
  if(c){console.log(leeks.colours[c](`[${t.toUpperCase()} | ${time()}] ${m}`))} else {console.log(`[${t.toUpperCase()} | ${time()}] ${m}`)};
};

exports.get = () => {
  return fs.readFileSync(path); // this will return the contents of the current log file (won't log it though)
};



module.exports.colors  = leeks.colors;
module.exports.colours = leeks.colours;
module.exports.color  = leeks.colors;
module.exports.colour = leeks.colours;
module.exports.style = leeks.styles;
module.exports.styles = leeks.styles;
module.exports.options = this.options;
